FROM centos:7

# JOPA GNU-OpenMPI container

RUN yum install -y epel-release && \
    yum install -y \
        build-essential \
        gnupg2 && \
    rm -rf /var/cache/yum/*

RUN yum install -y \
        bc \
        bison \
        bzip2 \
        csh \
        curl \
        expat-devel \
        file \
        flex \
        gmp-devel \
        ksh \
        less \
        libX11-devel \
        libxml2-devel \
        man-db \
        mpfr-devel \
        nano \
        ncurses-devel \
        openssh-server \
        openssl-devel \
        redhat-lsb-core \
        swig \
        tcl \
        tcsh \
        time \
        tk \
        unzip \
        wget \
        wish && \
    rm -rf /var/cache/yum/*

# GNU compiler
RUN yum install -y \
        bzip2 \
        file \
        gcc \
        gcc-c++ \
        git \
        make \
        perl \
        tar \
        wget \
        xz && \
    rm -rf /var/cache/yum/*

RUN    cd / && \
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp http://ftpmirror.gnu.org/gcc/gcc-9.3.0/gcc-9.3.0.tar.xz && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/gcc-9.3.0.tar.xz -C /var/tmp -J && \
    cd /var/tmp/gcc-9.3.0 && ./contrib/download_prerequisites && \
    mkdir -p /var/tmp/objdir && cd /var/tmp/objdir &&   /var/tmp/gcc-9.3.0/configure --prefix=/usr/local/gnu --disable-multilib --enable-languages=c,c++,fortran && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/gcc-9.3.0.tar.xz /var/tmp/gcc-9.3.0 /var/tmp/objdir

ENV LD_LIBRARY_PATH=/usr/local/gnu/lib64:$LD_LIBRARY_PATH \
    PATH=/usr/local/gnu/bin:$PATH

# CMake version 3.16.4
RUN  yum install -y \
        make \
        wget && \
    rm -rf /var/cache/yum/*

RUN cd / && \
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://github.com/Kitware/CMake/releases/download/v3.16.4/cmake-3.16.4-Linux-x86_64.sh && \
    mkdir -p /usr/local && \
    /bin/sh /var/tmp/cmake-3.16.4-Linux-x86_64.sh --prefix=/usr/local --skip-license && \
    rm -rf /var/tmp/cmake-3.16.4-Linux-x86_64.sh

ENV PATH=/usr/local/bin:$PATH \
    LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

RUN yum install -y \
        doxygen \
        git \
        git-flow \
        graphviz \
        imagemagick \
        lynx \
        nedit \
        tex4ht \
        texinfo \
        texlive-latex-recommended \
        vim-minimal && \
    rm -rf /var/cache/yum/*

RUN cd / && \
    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | bash && \
    yum -y install git-lfs && \
    git lfs install --skip-repo

RUN yum install -y \
        autoconf \
        automake \
        clang-tidy \
        ddd \
        gdb \
        pkgconfig \
        valgrind && \
    rm -rf /var/cache/yum/*

RUN yum install -y \
        python3-dev \
        python3-devel \
        python3-pip \
        python3-scipy \
        python3-yaml && \
    rm -rf /var/cache/yum/*

# OpenMPI version 4.0.3
RUN yum install -y \
        bzip2 \
        file \
        hwloc \
        make \
        numactl-devel \
        openssh-clients \
        perl \
        tar \
        wget && \
    rm -rf /var/cache/yum/*

RUN cd / && \
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.3.tar.bz2 && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/openmpi-4.0.3.tar.bz2 -C /var/tmp -j && \
    cd /var/tmp/openmpi-4.0.3 &&  CC=/usr/local/gnu/bin/gcc CXX=/usr/local/gnu/bin/g++ F77=/usr/local/gnu/bin/gfortran F90=/usr/local/gnu/bin/gfortran FC=/usr/local/gnu/bin/gfortran LD_LIBRARY_PATH='/usr/local/gnu/lib64:$LD_LIBRARY_PATH' ./configure --prefix=/usr/local --enable-mpi-cxx --without-cuda --without-verbs && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/openmpi-4.0.3 /var/tmp/openmpi-4.0.3.tar.bz2

RUN cd / && \
    cd /usr/local/src && \
    curl -O -L https://boostorg.jfrog.io/artifactory/main/release/1.68.0/source/boost_1_68_0.tar.bz2 && \
    mkdir -p /usr/local/install && cd /usr/local/install && \
    tar -xf /usr/local/src/boost_1_68_0.tar.bz2 boost_1_68_0/boost && \
    cd boost_1_68_0 && mkdir include && mv boost include/ && \
    cd && rm /usr/local/src/boost_1_68_0.tar.bz2
ENV BOOST_ROOT=/usr/local/install/boost_1_68_0

RUN cd / && \
    cd /usr/local/src && \
    curl -O -L https://github.com/linux-test-project/lcov/archive/v1.15.tar.gz && \
    tar -xf v1.15.tar.gz && \
    cd lcov-1.15 && \
    make install && \
    cd && rm -rf /usr/local/src/{lcov-1.15,v1.15*}

RUN cd / && \
    cd /usr/local/src && \
    curl -O -L http://www.zlib.net/zlib-1.2.11.tar.gz && \
    tar -xf zlib-1.2.11.tar.gz && \
    cd zlib-1.2.11 && \
    ./configure --prefix=/usr/local && \
    make install && \
    cd && rm -rf /usr/local/src/zlib*

RUN cd / && \
    cd /usr/local/src && \
    curl -O -L https://support.hdfgroup.org/ftp/lib-external/szip/2.1.1/src/szip-2.1.1.tar.gz && \
    tar -xf szip-2.1.1.tar.gz && \
    cd szip-2.1.1 && \
    CFLAGS="-fPIC -O3 -w" ./configure --prefix=/usr/local && \
    make -j$(nproc) && make install && \
    cd && rm -rf /usr/local/src/szip*

RUN cd / && \
    cd /usr/local/src && \
    curl -O -L ftp://ftp.unidata.ucar.edu/pub/udunits/udunits-2.2.28.tar.gz && \
    tar -xf udunits-2.2.28.tar.gz && \
    cd udunits-2.2.28 && \
    ./configure --prefix=/usr/local && \
    make && make check && make install && \
    cd && rm -rf /usr/local/src/udunits*

# MKL version 2020.0-088
RUN rpm --import https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    yum install -y yum-utils && \
    yum-config-manager --add-repo https://yum.repos.intel.com/mkl/setup/intel-mkl.repo && \
    yum install -y \
        intel-mkl-64bit-2020.0-088 && \
    rm -rf /var/cache/yum/*

ENV CPATH=/opt/intel/mkl/include:$CPATH \
    LD_LIBRARY_PATH=/opt/intel/mkl/lib/intel64:/opt/intel/lib/intel64:$LD_LIBRARY_PATH \
    LIBRARY_PATH=/opt/intel/mkl/lib/intel64:/opt/intel/lib/intel64:$LIBRARY_PATH \
    MKLROOT=/opt/intel/mkl \
    Eigen3_ROOT=/usr/local/install/eigen-3.3.7

RUN cd / && \
    cd /usr/local/src && \
    git clone https://gitlab.com/libeigen/eigen.git -b 3.3.7 && \
    mkdir -p build && cd build && \
    cmake . -DCMAKE_INSTALL_PREFIX=$Eigen3_ROOT ../eigen && \
    make install && \
    cd && rm -rf /usr/local/src/{build,eigen*}

# HDF5 version 1.12.0
RUN yum install -y \
        bzip2 \
        file \
        make \
        wget \
        zlib-devel && \
    rm -rf /var/cache/yum/*

RUN cd / && \
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.0/src/hdf5-1.12.0.tar.bz2 && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/hdf5-1.12.0.tar.bz2 -C /var/tmp -j && \
    cd /var/tmp/hdf5-1.12.0 &&  CC=mpicc CXX=mpicxx F77=mpif77 F90=mpif90 FC=mpifort ./configure --prefix=/usr/local/hdf5 --enable-build-mode=production --enable-cxx --enable-fortran --enable-memory-alloc-sanity-check --enable-parallel --enable-threadsafe --enable-unsupported --with-szlib=/usr/local --with-zlib=/usr/local && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/hdf5-1.12.0 /var/tmp/hdf5-1.12.0.tar.bz2

ENV CPATH=/usr/local/hdf5/include:$CPATH \
    HDF5_DIR=/usr/local/hdf5 \
    LD_LIBRARY_PATH=/usr/local/hdf5/lib:$LD_LIBRARY_PATH \
    LIBRARY_PATH=/usr/local/hdf5/lib:$LIBRARY_PATH \
    PATH=/usr/local/hdf5/bin:$PATH \
    CPPFLAGS="-I${H5DIR}/include" \
    H5DIR=/usr/local/hdf5 \
    LDFLAGS=-L${H5DIR}/lib \
    LIBS=-ldl

# NetCDF version 4.7.4, NetCDF C++ version 4.3.1, NetCDF Fortran
# version 4.5.3
RUN yum install -y \
        ca-certificates \
        file \
        libcurl-devel \
        m4 \
        make \
        wget \
        zlib-devel && \
    rm -rf /var/cache/yum/*

RUN cd / && \
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://github.com/Unidata/netcdf-c/archive/v4.7.4.tar.gz && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/v4.7.4.tar.gz -C /var/tmp -z && \
    cd /var/tmp/netcdf-c-4.7.4 && \
    CC=mpicc CXX=mpicxx F77=mpif77 F90=mpif90 FC=mpifort ./configure --prefix=/usr/local/netcdf --enable-netcdf-4 --enable-shared && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/netcdf-c-4.7.4 /var/tmp/v4.7.4.tar.gz

ENV CPATH=/usr/local/netcdf/include:$CPATH \
    LD_LIBRARY_PATH=/usr/local/netcdf/lib:$LD_LIBRARY_PATH \
    LIBRARY_PATH=/usr/local/netcdf/lib:$LIBRARY_PATH \
    PATH=/usr/local/netcdf/bin:$PATH \
    NETCDF_DIR=/usr/local/netcdf \
    NetCDF_ROOT=/usr/local/netcdf

RUN cd / && \
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://github.com/Unidata/netcdf-cxx4/archive/v4.3.1.tar.gz && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/v4.3.1.tar.gz -C /var/tmp -z && \
    cd /var/tmp/netcdf-cxx4-4.3.1 && \
    CC=mpicc CXX=mpicxx F77=mpif77 F90=mpif90 FC=mpifort ./configure --prefix=/usr/local/netcdf --enable-netcdf-4 --enable-shared && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/netcdf-cxx4-4.3.1 /var/tmp/v4.3.1.tar.gz

RUN cd / && \
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://github.com/Unidata/netcdf-fortran/archive/v4.5.3.tar.gz && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/v4.5.3.tar.gz -C /var/tmp -z && \
    cd /var/tmp/netcdf-fortran-4.5.3 && \
    CC=mpicc CXX=mpicxx F77=mpif77 F90=mpif90 FC=mpifort ./configure --prefix=/usr/local/netcdf --enable-netcdf-4 --enable-shared && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/netcdf-fortran-4.5.3 /var/tmp/v4.5.3.tar.gz

# PnetCDF version 1.12.1
RUN yum install -y \
        file \
        m4 \
        make \
        perl \
        tar \
        wget && \
    rm -rf /var/cache/yum/*

RUN cd / && \
    mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://parallel-netcdf.github.io/Release/pnetcdf-1.12.1.tar.gz && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/pnetcdf-1.12.1.tar.gz -C /var/tmp -z && \
    cd /var/tmp/pnetcdf-1.12.1 &&  CC=mpicc CXX=mpicxx F77=mpif77 F90=mpif90 FC=mpifort ./configure --prefix=/usr/local/pnetcdf --enable-fortran --enable-largefile --enable-netcdf4 --enable-shared && \
    cd /var/tmp/pnetcdf-1.12.1 && \
    sed -i -e 's#pic_flag=""#pic_flag=" -fpic -DPIC"#' -e 's#wl=""#wl="-Wl,"#' libtool && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/pnetcdf-1.12.1 /var/tmp/pnetcdf-1.12.1.tar.gz

ENV CPATH=/usr/local/pnetcdf/include:$CPATH \
    LD_LIBRARY_PATH=/usr/local/pnetcdf/lib:$LD_LIBRARY_PATH \
    LIBRARY_PATH=/usr/local/pnetcdf/lib:$LIBRARY_PATH \
    PATH=/usr/local/pnetcdf/bin:$PATH

RUN cd / && \
    cd /usr/local/src && \
    git clone https://gitlab.com/remikz/nccmp.git -b 1.8.7.0 && \
    cd nccmp && \
    autoreconf -f -i && \
    ./configure --prefix=/usr/local && \
    make && make install && \
    cd && rm -rf /usr/local/src/nccmp*

RUN cd / && \
    cd /usr/local/src && \
    git clone https://github.com/ecmwf/ecbuild.git -b 3.5.0 && \
    cd ecbuild && \
    mkdir bootstrap && cd bootstrap && \
    ../bin/ecbuild --prefix=/usr/local .. && \
    make install && \
    cd && rm -rf /usr/local/src/{bootstrap,ecbuild*}

RUN cd / && \
    cd /usr/local/src && \
    git clone https://github.com/ecmwf/eckit.git -b 1.16.1 && \
    mkdir -p build && cd build && \
    ecbuild --build=Release ../eckit && \
    make -j$(nproc) && make install && \
    cd && rm -rf /usr/local/src/{build,eckit*}

#RUN cd / && \
#    cd /usr/local/src && \
#    git clone https://github.com/ecmwf/fckit.git -b 0.9.2 && \
#    mkdir -p build && cd build && \
#    ecbuild --build=Release ../fckit && \
#    make -j$(nproc) && make install && \
#    cd && rm -rf /usr/local/src/{build,fckit*}

ENV CC=gcc \
    CXX=g++

RUN cd / && \
    cd /usr/local/src && \
    git clone https://github.com/ecmwf/odc.git -b 2021.03.0 && \
    mkdir -p build && cd build && \
    ecbuild ../odc && \
    make -j$(nproc) && make install && \
    cd && rm -rf /usr/local/src/{build,odc*}

RUN cd / && \
    /usr/bin/python3.6 -m pip install pytest && \
    cd /usr/local/src && \
    git clone https://github.com/pybind/pybind11.git -b v2.5.0 && \
    cd pybind11 && \
    mkdir -p build && cd build && \
    cmake .. && \
    make -j$(nproc) && make install && \
    cd && rm -rf /usr/local/src/{build,pybind11*}

RUN cd / && \
    cd /usr/local/src && \
    git clone https://github.com/gsl-lite/gsl-lite -b 0.37.0 gsl-lite-0.37 && \
    cd gsl-lite-0.37 && \
    cmake --prefix=./ . && \
    make DESTDIR=./install install && \
    mkdir -p /usr/local/install/gsl-lite-0.37 && \
    mv ./install/usr/local/* /usr/local/install/gsl-lite-0.37/ && \
    cd && rm -rf /usr/local/src/gsl-lite-0.37 && \
    export PATH=/usr/local/install/gsl-lite-0.37/lib64/cmake:$PATH

ENV CMAKE_PREFIX_PATH=/usr/local/install/gsl-lite-0.37/lib64/cmake:$CMAKE_PREFIX_PATH

RUN cd / && \
    rm -rf {/usr/local/src/*,/var/tmp/*}
